name: CD ACA

on:
  workflow_dispatch:
    inputs:  
        IMAGE_TAG:
          description: "Image tag to be deployed"
          required: true
        FIRST_DEPLOY:
          description: "Is this the first deployment?"
          required: true
          default: "false"
env:
  CONTAINER-APP-NAME: "srewithazurev2-aca-app"
jobs:
  deploy-container-apps:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Using https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure-openid-connect
    - name: Set up Azure CLI
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        allow-no-subscriptions: true

    - name: Enable debug logs
      run: echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV

    - name: Create resource group if it does not exist
      run: |
        az group create --name ${{ secrets.AZURE_RESOURCE_GROUP }} --location eastus

    - name: Get latest revision name if not first deploy
      if: ${{ github.event.inputs.FIRST_DEPLOY == 'false' }}
      id: get-revision
      run: |
        revision_name=$(az containerapp revision list \
          --name ${{ env.CONTAINER-APP-NAME}} \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --query "[?properties.active].name | [0]" \
          --output tsv)
        echo "revision_name=$revision_name" >> $GITHUB_ENV
        echo "::set-output name=revision_name::$revision_name"

    - name: Create Azure Container App solution
      run: |
        az deployment group create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --template-file infra/main.bicep \
          --parameters  containerAppName=${{ env.CONTAINER-APP-NAME}}  useNewContainerAppModule=${{ github.event.inputs.FIRST_DEPLOY }}  weatherApiKey=${{ secrets.WEATHER_API_KEY }} acrName=${{ secrets.ACR_NAME }} containerImage=${{ secrets.ACR_NAME }}.azurecr.io/net8-app:${{ github.event.inputs.IMAGE_TAG }} revisionName=${{ steps.get-revision.outputs.revision_name }}

